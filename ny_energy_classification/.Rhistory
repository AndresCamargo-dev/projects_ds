knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(DataExplorer)
library(caret)
library(forcats)
library(factoextra)
library(cluster)
library(mclust)
library(GGally)
library(plotly)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(ggthemes)
library(pROC)
library(sjPlot)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(DataExplorer)
library(caret)
library(forcats)
library(factoextra)
library(cluster)
library(mclust)
library(GGally)
library(plotly)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(ggthemes)
library(pROC)
library(sjPlot)
data = read.csv("Energy_and_Water_Data_Disclosure_for_Local_Law_84_2020__Data_for_Calendar_Year_2019_.csv")
#head(data)
#nrow(data)
#ncol(data)
building_type = data %>% select(Property.Id, Largest.Property.Use.Type)
clean_ny = data %>%
# feature selection
select(c(Largest.Property.Use.Type...Gross.Floor.Area..ft.., ENERGY.STAR.Score,
Occupancy, Weather.Normalized.Source.EUI..kBtu.ft..,
Weather.Normalized.Source.Energy.Use..kBtu., Fuel.Oil..2.Use..kBtu.,
Weather.Normalized.Site.Natural.Gas.Use..therms.,
Weather.Normalized.Site.Electricity..kWh.,
Electricity.Use...Grid.Purchase.and.Generated.from.Onsite.Renewable.Systems..kWh.,
Total.GHG.Emissions..Metric.Tons.CO2e.,  Water.Use..All.Water.Sources...kgal.,
Water.Use.Intensity..All.Water.Sources...gal.ft.., Property.Id,
Latitude,
Longitude
)) %>%
mutate(across(where(is.character), as.integer)) %>%
# Discarting NAs
drop_na() %>%
#Renaming variables
rename(area = 1,
energy_score = 2,
occupancy = 3,
eui = 4,
energy_use = 5,
fueloil_use = 6,
gas_use = 7,
electricity_grid_use = 8,
renewables_use = 9,
ghg_emissions = 10,
water_use = 11,
wui = 12
) %>%
# Feature engineering
mutate(
occupancy_pa = occupancy/area,
fueloil_use_pa = fueloil_use/area,
gas_use_pa = gas_use/area,
electricity_useGP_pa = electricity_grid_use/area,
renewables_use_pa = renewables_use/area,
ghg_emissions_pa = ghg_emissions/area,
) %>%
select(!c(energy_use, water_use, occupancy, fueloil_use,gas_use,electricity_grid_use,renewables_use, ghg_emissions)) %>%
left_join(building_type, by = 'Property.Id' ) %>%
rename(type = Largest.Property.Use.Type) %>%
mutate(type = as.factor(type))
head(clean_ny)
plot_missing(clean_ny)
clean_ny <- clean_ny %>%
mutate(type = if_else(type %in% c("Multifamily Housing"), "Multifamily Housing",
if_else(type %in% c("K-12 School"), "K-12 School",
if_else(type %in% c("Office"), "Office", "Others")))) %>%
mutate(area = case_when(
area <= 50000 ~ "midsize",
area > 50000 & area <= 500000 ~ "large",
area > 500000 ~ "very large",
)) %>% mutate(area=as.factor(area))
clean_ny %>% ggplot(aes(y=fct_rev(fct_infreq(type)))) +
geom_bar(fill="#336699") +
labs(title= "Number of buildings per type") +
ylab("") +
theme_classic()
clean_ny %>% ggplot(aes(type, energy_score)) +
geom_boxplot(fill="#336699") +
labs(title= "Buildings by type", y="Energy Score", x="") +
theme_classic()
clean_ny %>% ggplot(aes(area, energy_score)) +
geom_boxplot(fill="#336699") +
labs(title= "Buildings by size",  y="Energy Score", x="") +
theme_classic()
#table(clean_ny$type)/length(clean_ny$type)
boxplot(clean_ny$occupancy_pa, xlab="Occupancy per m2", col="lightblue")
boxplot(clean_ny$eui, xlab="Energy Use Intensity", col="lightblue")
boxplot(clean_ny$ghg_emissions_pa, xlab="GHG Emissions per m2", col="lightblue")
boxplot(clean_ny$fueloil_use_pa, xlab="Fuel Oil Use per m2", col="lightblue")
boxplot(clean_ny$gas_use_pa, xlab="Gas Use per m2", col="lightblue")
boxplot(clean_ny$electricity_useGP_pa, xlab="Electricity Use - GP per m2", col="lightblue")
boxplot(clean_ny$renewables_use_pa, xlab="Renewable Energy Use per m2", col="lightblue")
boxplot(clean_ny$wui, xlab="Water Use Intensity per m2", col="lightblue")
detect_outliers = function(x){
q1 = quantile(x, probs=.25)
q3 = quantile(x, probs=.75)
iqr = q3-q1
x > (q3 + (iqr*1.5)) | x < (q1-(iqr*1.5) )
}
rmv_outliers = function(dataframe, columns=names(dataframe)) {
for (col in columns) {
dataframe <- dataframe[!detect_outliers(dataframe[[col]]), ]
}
dataframe
}
buildings_clean = rmv_outliers(clean_ny, c("occupancy_pa", "eui",
"fueloil_use_pa","gas_use_pa","electricity_useGP_pa","renewables_use_pa","ghg_emissions_pa","wui" ))
# Select continuous variables
ny_buildings = buildings_clean %>% select(!c(Property.Id,type, Latitude, Longitude, area))
plot_scatterplot(ny_buildings, by="eui")
#types = buildings_clean$type
#ids = buildings_clean$Property.Id
## REvisar que la variable de renovables corresponda solo a renovables
plot_correlation(ny_buildings %>% select(!eui))
ny_buildings = buildings_clean %>% select(!c(Property.Id))
ny_buildings = ny_buildings %>% mutate(
efficiency = as.factor(ifelse(energy_score > 75, "Yes", "No"))
) %>% select(!energy_score)
set.seed(163)
# split data
in_train <- createDataPartition(ny_buildings$efficiency, p = 0.75, list = FALSE)
training <- ny_buildings[in_train,]
testing <- ny_buildings[-in_train,]
ctrl = trainControl(
method = "repeatedcv",
number = 10,
classProbs = T,
summaryFunction = twoClassSummary,
verboseIter = T
)
logistic = train(
efficiency ~
area+wui+occupancy_pa+fueloil_use_pa+gas_use_pa+electricity_useGP_pa+ghg_emissions_pa+
type,
data = training,
method= "glm",
family = "binomial",
metric = "ROC",
preProc= c('scale', 'center'),
tuneLength= 10,
trControl = ctrl)
#model summary
summary(logistic$finalModel)
tab_model(logistic$finalModel)
log_prediction <- predict(logistic,testing,type="prob")
prediction = as.factor(ifelse(log_prediction[,2]>0.5, "Yes", "No"))
confusionMatrix(prediction, testing$efficiency)
roc(testing$efficiency, log_prediction[,2])$auc
rfFit = train(
efficiency ~
area+wui+occupancy_pa+fueloil_use_pa+gas_use_pa+electricity_useGP_pa+ghg_emissions_pa+
type+Longitude+Latitude,
data = training,
method= "rf",
preProc= c('scale', 'center'),
tuneLength= 10,
metric = "ROC",
trControl = ctrl
)
rfProb = predict(rfFit, testing, type = "prob")
prediction = as.factor(ifelse(rfProb[,2]>0.5, "Yes", "No"))
confusionMatrix(prediction, testing$efficiency)
plot(varImp(rfFit, scale = F), scales = list(y = list(cex = .95)))
roc(testing$efficiency, rfProb[,2])$auc
tab_model(logistic$finalModel)
confusionMatrix(prediction, testing$efficiency)
roc(testing$efficiency, log_prediction[,2])$auc
confusionMatrix(prediction, testing$efficiency)
roc(testing$efficiency, log_prediction[,2])$auc
world <- ne_countries(scale = "medium", returnclass = "sf")
sites <- data.frame(lon = testing$Longitude, lat= testing$Latitude, efficiency=prediction)
ggplot(data = world) +
geom_sf() +
geom_point(data = sites, aes(x = lon, y = lat, color=factor(efficiency)), size = 1) +
coord_sf(xlim = c(-73.5, -74.5), ylim = c(40.4, 41), expand = FALSE) +
ggtitle("Energy Efficient New York buildings") +
labs(color = "Energy Efficiency")
ggplot(data = world) +
geom_sf() +
geom_point(data = sites, aes(x = lon, y = lat, color=factor(efficiency)), size = 1) +
coord_sf(xlim = c(-73.5, -74.5), ylim = c(40.4, 41), expand = FALSE) +
ggtitle("Energy Efficient New York buildings") +
labs(color = "Energy Efficiency")
ggplot(data = world) +
geom_sf() +
geom_point(data = sites, aes(x = lon, y = lat, color=factor(efficiency)), size = 1) +
coord_sf(xlim = c(-73.5, -74.5), ylim = c(40.4, 41), expand = FALSE) +
ggtitle("Energy Efficient New York buildings") +
labs(color = "")
